[SH-Outline]
ParamList         = texture # BorderColorStart # BorderColorEnd # BorderThicknessX # BorderThicknessY # PulseTime # AgeInSeconds # OpacityLimit
BorderThicknessX   = 0.025 ; Relative to the size (width) of the texture, so it must be between 0.0 and 1.0, but even smaller values can become too large quickly.
BorderThicknessY   = 0.025 ; Relative to the size (length) of the texture, so it must be between 0.0 and 1.0, but even smaller values can become too large quickly.
PulseTime         = 1.0 ; The amount of time, in seconds, that constitutes one complete cycle from BorderColorStart to BorderColorEnd
AgeInSeconds      = time
OpacityLimit      = 0.5 ; Since this is an alpha value, it must be between 0.0 and 1.0
Code              = "

void main()
{
	// The default color of the texture at the current pixel.
	vec4 col = texture2D(texture, gl_TexCoord[0].xy);
	// Represents whether or not the pixel is within a distance of BorderThickness (X or Y, depending) from any edge of the texture.
	bool bIsNotOnTextureEdge = gl_TexCoord[0].x > BorderThicknessX
							   && gl_TexCoord[0].x < 1.0 - BorderThicknessX
							   && gl_TexCoord[0].y > BorderThicknessY
							   && gl_TexCoord[0].y < 1.0 - BorderThicknessY;
	
	// If the texture's alpha is greater than OpacityLimit at the current pixel, we simply output the texture's default color at that pixel.
	if (col.a > OpacityLimit && bIsNotOnTextureEdge)
	{
		gl_FragColor = col;
	}
	// Either the pixel has an alpha less than or equal to OpacityLimit, or it resides on/near the texture's edge, so we color it if it passes further checks.
	else 
	{
		// A float which represents the sum of the alphas of all four cardinal points a distance of BorderThickness (X or Y, depending) away from the current pixel.
		float a = texture2D(texture, vec2(gl_TexCoord[0].x + BorderThicknessX, gl_TexCoord[0].y)).a +
			texture2D(texture, vec2(gl_TexCoord[0].x, gl_TexCoord[0].y - BorderThicknessY)).a +
			texture2D(texture, vec2(gl_TexCoord[0].x - BorderThicknessX, gl_TexCoord[0].y)).a +
			texture2D(texture, vec2(gl_TexCoord[0].x, gl_TexCoord[0].y + BorderThicknessY)).a;
			
		// If a > 0.0, we know that the current pixel is within a distance of BorderThickness (X or Y, depending) from the nearest non-transparent pixel within the texture.	
		if (a > 0.0)
		{
			// The normalized position of the pulse, from 0.0 to 1.0, indicating whether the pulse is halfway finished, three quarters finished, etc.
			float pulsePosition = mod(AgeInSeconds, PulseTime) / PulseTime;
			
			// If we've made it halfway through a pulse cycle, we transition from BorderColorEnd to BorderColorStart
			if (pulsePosition > PulseTime / 2.0)
			{
				gl_FragColor = vec4(BorderColorEnd.r - ((BorderColorEnd.r - BorderColorStart.r) * pulsePosition),
									BorderColorEnd.g - ((BorderColorEnd.g - BorderColorStart.g) * pulsePosition),
									BorderColorEnd.b - ((BorderColorEnd.b - BorderColorStart.b) * pulsePosition),
									1.0);
			}
			// If we've yet to make it halfway through a pulse cycle, we transition from BorderColorStart to BorderColorEnd
			else
			{
				gl_FragColor = vec4(BorderColorStart.r + ((BorderColorEnd.r - BorderColorStart.r) * pulsePosition),
									BorderColorStart.g + ((BorderColorEnd.g - BorderColorStart.g) * pulsePosition),
									BorderColorStart.b + ((BorderColorEnd.b - BorderColorStart.b) * pulsePosition),
									1.0);
			}
		}
		// The current pixel is more than BorderThickness units away from the nearest non-transparent pixel, so we don't adjust its color.
		else
		{
			gl_FragColor = col;
		}
	}
}"

[SH-OutlineP1@SH-Outline]
BorderColorStart       = (0.0, 1.0, 1.0) ; cyan
BorderColorEnd     = (0.0, 0.0, 1.0) ; blue

[SH-OutlineP2@SH-Outline]
BorderColorStart      = (1.0, 0.6470588235, 0.0) ; orange
BorderColorEnd     = (1.0, 0.0, 0.0) ; red

[SH-OutlineText@SH-Outline]
BorderThicknessX      = 0.0005
BorderThicknessY      = 0.0005
BorderColorStart      = (0.0, 1.0, 1.0) ; cyan
BorderColorEnd        = (0.0, 0.0, 1.0) ; blue